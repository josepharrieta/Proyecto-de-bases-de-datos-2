name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_DB: restaurant_db_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
          xpack.security.enabled: false
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9200:9200

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install search service dependencies
      run: |
        cd search-service
        npm ci

    - name: Wait for services
      run: |
        sleep 30
        curl -f http://localhost:9200/_cluster/health || exit 1

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        DATABASE_TYPE: postgres
        POSTGRES_URI: postgresql://postgres:postgres123@localhost:5432/restaurant_db_test
        REDIS_URL: redis://localhost:6379
        ELASTICSEARCH_URL: http://localhost:9200
        JWT_SECRET: test-secret

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_TYPE: postgres
        POSTGRES_URI: postgresql://postgres:postgres123@localhost:5432/restaurant_db_test
        REDIS_URL: redis://localhost:6379
        ELASTICSEARCH_URL: http://localhost:9200
        JWT_SECRET: test-secret

    - name: Generate coverage report
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_TYPE: postgres
        POSTGRES_URI: postgresql://postgres:postgres123@localhost:5432/restaurant_db_test
        REDIS_URL: redis://localhost:6379
        ELASTICSEARCH_URL: http://localhost:9200
        JWT_SECRET: test-secret

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push API service
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/api-service:latest
          ghcr.io/${{ github.repository }}/api-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Search service
      uses: docker/build-push-action@v4
      with:
        context: ./search-service
        file: ./search-service/Dockerfile
        push: true
        tags: |
          ghcr.io/${{ github.repository }}/search-service:latest
          ghcr.io/${{ github.repository }}/search-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy notification
      run: |
        echo "Deployment ready! Pull the latest images and run:"
        echo "docker-compose pull"
        echo "docker-compose up -d"