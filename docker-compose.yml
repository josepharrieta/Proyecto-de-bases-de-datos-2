version: '3.8'

services:
  # MongoDB Configuration Server
  mongo-config:
    image: mongo:6.0
    container_name: mongo-config
    command: mongod --configsvr --replSet configReplSet --port 27019 --dbpath /data/configdb
    volumes:
      - mongo-config-data:/data/configdb
      - ./docker/mongo-config:/docker-entrypoint-initdb.d
    networks:
      - restaurant-network
    restart: unless-stopped

  # MongoDB Shard 1 - Primary
  mongo-shard1-primary:
    build:
      context: ./docker/mongoDB/replica-set/primary
      dockerfile: Dockerfile
    container_name: mongo-shard1-primary
    command: mongod --shardsvr --replSet shard1ReplSet --port 27018 --dbpath /data/db
    volumes:
      - mongo-shard1-primary-data:/data/db
      - ./docker/mongoDB/mongo-keyfile:/opt/keyfile
    networks:
      - restaurant-network
    restart: unless-stopped

  # MongoDB Shard 1 - Secondary 1
  mongo-shard1-secondary1:
    build:
      context: ./docker/mongoDB/replica-set/secondary1
      dockerfile: Dockerfile
    container_name: mongo-shard1-secondary1
    command: mongod --shardsvr --replSet shard1ReplSet --port 27018 --dbpath /data/db
    volumes:
      - mongo-shard1-secondary1-data:/data/db
      - ./docker/mongoDB/mongo-keyfile:/opt/keyfile
    networks:
      - restaurant-network
    restart: unless-stopped

  # MongoDB Shard 1 - Secondary 2
  mongo-shard1-secondary2:
    build:
      context: ./docker/mongoDB/replica-set/secondary2
      dockerfile: Dockerfile
    container_name: mongo-shard1-secondary2
    command: mongod --shardsvr --replSet shard1ReplSet --port 27018 --dbpath /data/db
    volumes:
      - mongo-shard1-secondary2-data:/data/db
      - ./docker/mongoDB/mongo-keyfile:/opt/keyfile
    networks:
      - restaurant-network
    restart: unless-stopped

  # MongoDB Router (mongos)
  mongo-router:
    image: mongo:6.0
    container_name: mongo-router
    command: mongos --configdb configReplSet/mongo-config:27019 --port 27017
    depends_on:
      - mongo-config
      - mongo-shard1-primary
    networks:
      - restaurant-network
    ports:
      - "27017:27017"
    restart: unless-stopped

  # PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_DB: restaurant_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - restaurant-network
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - restaurant-network
    ports:
      - "6379:6379"
    restart: unless-stopped

  # ElasticSearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - restaurant-network
    ports:
      - "9200:9200"
    restart: unless-stopped

  # Main API Service (scalable)
  api-service:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DATABASE_TYPE=mongodb
      - MONGODB_URI=mongodb://mongo-router:27017/restaurant_db
      - POSTGRES_URI=postgresql://postgres:postgres123@postgres:5432/restaurant_db
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - JWT_SECRET=your-super-secret-jwt-key-here-change-in-production
      - PORT=3000
    depends_on:
      - mongo-router
      - postgres
      - redis
      - elasticsearch
    networks:
      - restaurant-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Search Service (scalable)
  search-service:
    build:
      context: ./search-service
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - MONGODB_URI=mongodb://mongo-router:27017/restaurant_db
      - PORT=3001
    depends_on:
      - elasticsearch
      - mongo-router
    networks:
      - restaurant-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx-lb
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - api-service
      - search-service
    networks:
      - restaurant-network
    restart: unless-stopped

networks:
  restaurant-network:
    driver: bridge

volumes:
  mongo-config-data:
  mongo-shard1-primary-data:
  mongo-shard1-secondary1-data:
  mongo-shard1-secondary2-data:
  postgres-data:
  redis-data:
  elasticsearch-data: