services:
  # ---- MongoDB Sharded Cluster ----
  # --- Config Server (Réplica Set de 1 nodo) ---
  mongo-config1:
    build:
      context: .
      dockerfile: docker/mongo-config//Dockerfile
    command: ["mongod", "--configsvr", "--replSet", "rs-config", "--bind_ip_all", "--port", "27019", "--keyFile", "/etc/mongo-keyfile"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_config1_data:/data/configdb
    ports:
      - "27019:27019"
    secrets:
      - source: mongo-keyfile
        target: /etc/mongo-keyfile
        mode: 0400
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "rs.status().ok"]
      interval: 10s
      timeout: 10s
      retries: 30

  mongo-config2:
    build:
      context: .
      dockerfile: docker/mongo-config//Dockerfile
    command: ["mongod", "--configsvr", "--replSet", "rs-config", "--bind_ip_all", "--port", "27020", "--keyFile", "/etc/mongo-keyfile"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_config2_data:/data/configdb
    ports:
      - "27020:27020"
    secrets:
      - source: mongo-keyfile
        target: /etc/mongo-keyfile
        mode: 0400
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27020", "--eval", "rs.status().ok"]
      interval: 10s
      timeout: 10s
      retries: 30

  mongo-config3:
    build:
      context: .
      dockerfile: docker/mongo-config//Dockerfile
    command: ["mongod", "--configsvr", "--replSet", "rs-config", "--bind_ip_all", "--port", "27021", "--keyFile", "/etc/mongo-keyfile"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo_config3_data:/data/configdb
    ports:
      - "27021:27021"
    secrets:
      - source: mongo-keyfile
        target: /etc/mongo-keyfile
        mode: 0400
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mongosh", "--port", "27021", "--eval", "rs.status().ok"]
      interval: 10s
      timeout: 10s
      retries: 30



  # ---- Réplica Set (1 primario + 2 secundarios) ----
  mongo-primary:
    build:
      context: .
      dockerfile: docker/mongoDB/replica-set/primary/Dockerfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27101:27017"
    command: ["mongod", "--shardsvr", "--replSet", "rs-shard1", "--port", "27017", "--bind_ip_all"]
    depends_on:
      mongo-config1:
        condition: service_healthy
    container_name: mongo-primary
    secrets:
      - source: mongo-keyfile
        target: /etc/mongo-keyfile
        mode: 0400
    volumes:
      - ./docker/mongoDB/replica-set/primary/init.js:/docker-entrypoint-initdb.d/init.js:ro
      - mongo_primary_data:/data/db
    hostname: mongo-primary
    networks:
      backend:
        aliases:
          - mongo-primary
          - mongo-primary.local  # Alias adicional
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5


  mongo-secondary1:
    build:
      context: .
      dockerfile: docker/mongoDB/replica-set/secondary1/Dockerfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    container_name: mongo-secondary1
    ports:
      - "27102:27017"
    command: ["mongod", "--shardsvr", "--replSet", "rs-shard1", "--port", "27017", "--bind_ip_all"]
    depends_on:
      mongo-primary:
        condition: service_healthy
      mongo-config1:
        condition: service_healthy
    secrets:
      - source: mongo-keyfile
        target: /etc/mongo-keyfile
        mode: 0400
    volumes:
      - mongo_secondary1_data:/data/db
    hostname: mongo-secondary1
    networks:
      backend:
        aliases:
          - mongo-secondary1
          - mongo-secondary1.local
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-secondary2:
    build:
      context: .
      dockerfile: docker/mongoDB/replica-set/secondary2/Dockerfile
    container_name: mongo-secondary2
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "27103:27017"
    command: ["mongod", "--shardsvr", "--replSet", "rs-shard1", "--port", "27017", "--bind_ip_all"]
    depends_on:
      mongo-primary:
        condition: service_healthy
    secrets:
      - source: mongo-keyfile
        target: /etc/mongo-keyfile
        mode: 0400
    volumes:
      - mongo_secondary2_data:/data/db
    hostname: mongo-secondary2
    networks:
      backend:
        aliases:
          - mongo-secondary2
          - mongo-secondary2.local
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5


 # --- Mongos (Router) ---
  mongos:
    image: mongo:${MONGO_VERSION} 
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    command: mongos --configdb rs-config/mongo-config1:27019,mongo-config2:27019,mongo-config3:27019 --bind_ip_all --keyFile /etc/mongo-keyfile
    depends_on:
      mongo-config1:
        condition: service_healthy
      mongo-config2:
        condition: service_started
      mongo-config3:
        condition: service_started
      mongo-primary:
        condition: service_healthy
    ports:
      - "27017:27017"
    secrets:
      - source: mongo-keyfile
        target: /etc/mongo-keyfile
        mode: 0400
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ---- PostgreSQL ----
  postgres:
    image: postgres:${POSTGRES_VERSION}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ---- ElasticSearch ----
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    networks:
      - backend

  # ---- Redis ----
  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - backend

  # ---- API Principal ----
  api:
    build: .
    environment:
      DB_TYPE: ${DB_TYPE}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      MONGODB_URI: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongos:27017/restaurante?authSource=admin
      POSTGRES_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - .:/app
    ports:
      - "3000:3000"
    depends_on:
      mongos:  # Reemplaza mongos por el primario
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ---- Microservicio de Búsqueda ----
  search-service:
    build: 
      context: ./search-service
      dockerfile: Dockerfile
    environment:
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
    ports:
      - "3001:3000"
    depends_on:
      - elasticsearch
    networks:
      - backend

  # ---- Balanceador de Carga (Nginx) ----
  load-balancer:
    image: nginx:alpine
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - api
      - search-service
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

secrets:
  mongo-keyfile:
    file: ./docker/mongoDB/replica-set/mongo-keyfile 

volumes:
  mongo_config1_data:
  mongo_config2_data:
  mongo_config3_data:
  mongo_primary_data:
  mongo_secondary1_data:
  mongo_secondary2_data:
  postgres_data:
  es_data:
  redis_data:

networks:
  backend:
    driver: bridge